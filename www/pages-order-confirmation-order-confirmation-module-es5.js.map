{"version":3,"sources":["webpack:///src/pages/order-confirmation/order-confirmation.page.html","webpack:///src/pages/order-confirmation/order-confirmation-routing.module.ts","webpack:///src/pages/order-confirmation/order-confirmation.module.ts","webpack:///src/pages/order-confirmation/order-confirmation.page.scss","webpack:///src/pages/order-confirmation/order-confirmation.page.ts","webpack:///src/services/domain/pedido.service.ts"],"names":["routes","path","component","OrderConfirmationPageRoutingModule","imports","forChild","exports","OrderConfirmationPageModule","declarations","providers","OrderConfirmationPage","router","clienteService","cartService","pedidoService","pedido","getCurrentNavigation","extras","state","cartItems","getCart","items","findById","cliente","id","client","enderecoDeEntrega","list","position","findIndex","x","total","insert","pipe","createOrClearCart","response","codpedido","extractId","headers","get","error","status","navigateByUrl","subscribe","location","lastIndexOf","substring","selector","template","PedidoService","httpClient","pedidoDTO","post","API_URL","observe","responseType"],"mappings":"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","file":"pages-order-confirmation-order-confirmation-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title *ngIf=\\\"codpedido\\\">Pedido registrado!</ion-title>\\n    <ion-title *ngIf=\\\"!codpedido\\\">Confira seu pedido</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-card>\\n    <ion-card-header class=\\\"ion-inherit-color md hydrated\\\">\\n      <ion-card-title> Itens do pedido </ion-card-title>\\n    </ion-card-header>\\n\\n    <ion-item *ngFor=\\\"let item of cartItems\\\">\\n      <ion-thumbnail slot=\\\"start\\\">\\n        <img [src]=\\\"item.produto.imageUrl || 'assets/imgs/prod.jpg'\\\">\\n      </ion-thumbnail>\\n\\n      <ion-label>\\n        <h2>{{item.produto.nome}}</h2>\\n        <p class=\\\"nolinebreak\\\">{{item.quantidade}}</p>\\n        <p item-end>{{item.produto.preco * item.quantidade | currency}}</p>\\n      </ion-label>\\n    </ion-item>\\n  </ion-card>\\n\\n\\n  <ng-container *ngIf=\\\"cliente$ | async as cliente\\\">\\n    <div *ngIf=\\\"codpedido\\\">\\n      <ion-card>\\n        <ion-card-header>\\n          <ion-card-title> Cliente </ion-card-title>\\n        </ion-card-header>\\n\\n        <ion-item>\\n          <h2>{{cliente?.nome}}</h2>\\n          <p>{{cliente?.email}}</p>\\n        </ion-item>\\n      </ion-card>\\n\\n      <ng-container *ngIf=\\\"findEndereco(cliente) as endereco\\\">\\n        <ion-card>\\n          <ion-card-header>\\n            <ion-card-title> Endereço de entrega </ion-card-title>\\n          </ion-card-header>\\n\\n          <ion-item>\\n            <h2>{{endereco?.logradouro}}, {{endereco?.numero}}</h2>\\n            <p>{{endereco?.complemento}} {{endereco?.bairro}} CEP {{endereco?.cep}}</p>\\n            <p>{{endereco?.cidade.nome}}, {{endereco?.cidade.estado.nome}}</p>\\n          </ion-item>\\n        </ion-card>\\n      </ng-container>\\n    </div>\\n  </ng-container>\\n\\n\\n  <div *ngIf=\\\"codpedido\\\">\\n    <ion-card>\\n      <ion-card-header>\\n        <ion-card-title> Pagamento </ion-card-title>\\n      </ion-card-header>\\n\\n      <ng-container *ngIf=\\\"pedido.pagamento['@type']=='pagamentoComCartao'\\\">\\n        <ion-item>\\n          <ion-label> Pagamento com cartão </ion-label>\\n          <p>Parcelas: {{pedido.pagamento.numeroDeParcelas}}</p>\\n        </ion-item>\\n      </ng-container>\\n      <ng-container *ngIf=\\\"pedido.pagamento['@type']=='pagamentoComBoleto'\\\">\\n        <ion-item>\\n          <ion-label> Pagamento com boleto </ion-label>\\n        </ion-item>\\n      </ng-container>\\n\\n      <ion-button expand=\\\"block\\\" color=\\\"primary\\\" (click)=\\\"checkout()\\\">Confirmar pedido</ion-button>\\n      <ion-button expand=\\\"block\\\" color=\\\"secondary\\\" routerLink=\\\"/cart\\\">Voltar</ion-button>\\n    </ion-card>\\n\\n    <ion-button expand=\\\"block\\\" color=\\\"secondary\\\" routerLink=\\\"/cart\\\">Voltar</ion-button>\\n  </div>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { OrderConfirmationPage } from './order-confirmation.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrderConfirmationPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrderConfirmationPageRoutingModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PedidoService } from 'src/services/domain/pedido.service';\nimport { OrderConfirmationPageRoutingModule } from './order-confirmation-routing.module';\nimport { OrderConfirmationPage } from './order-confirmation.page';\n\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    OrderConfirmationPageRoutingModule\n  ],\n  declarations: [OrderConfirmationPage],\n  providers: [PedidoService]\n})\nexport class OrderConfirmationPageModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvcGFnZXMvb3JkZXItY29uZmlybWF0aW9uL29yZGVyLWNvbmZpcm1hdGlvbi5wYWdlLnNjc3MifQ== */\";","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { CartItem } from 'src/models/cart.item';\nimport { ClienteDTO } from 'src/models/cliente.dto';\nimport { PedidoDTO } from 'src/models/pedido.dto';\nimport { CartService } from 'src/services/cart.service';\nimport { ClienteService } from 'src/services/domain/cliente.service';\nimport { PedidoService } from 'src/services/domain/pedido.service';\n\n@Component({\n  selector: 'app-order-confirmation',\n  templateUrl: './order-confirmation.page.html',\n  styleUrls: ['./order-confirmation.page.scss'],\n})\nexport class OrderConfirmationPage {\n  pedido: PedidoDTO;\n  cartItems: CartItem[];\n  cliente$: Observable<ClienteDTO>;\n  codpedido: string;\n\n  constructor(\n    private router: Router,\n    clienteService: ClienteService,\n    private cartService: CartService,\n    private pedidoService: PedidoService,\n  ) {\n    this.pedido = this.router.getCurrentNavigation().extras.state.pedido;\n\n    this.cartItems = this.cartService.getCart().items;\n    clienteService.findById(this.pedido.cliente.id);\n  }\n\n  findEndereco(client: ClienteDTO) {\n    const id = this.pedido.enderecoDeEntrega.id;\n    const list = client['enderecos'];\n\n    const position = list.findIndex(x => x.id === id);\n    return list[position];\n  }\n\n  total() {\n    return this.cartService.total();\n  }\n\n  checkout() {\n    this.pedidoService.insert(this.pedido).pipe(\n      tap(() => this.cartService.createOrClearCart()),\n      tap(response => this.codpedido = this.extractId(response.headers.get('location'))),\n      catchError(error => {\n        if (error.status === 403) {\n          return this.router.navigateByUrl('/');\n        }\n      })\n    ).subscribe();\n  }\n\n  private extractId(location: string) {\n    const position = location.lastIndexOf('/');\n    return location.substring(position + 1);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { PedidoDTO } from '../../models/pedido.dto';\nimport { environment } from './../../environments/environment';\n\n@Injectable()\nexport class PedidoService {\n    constructor(public httpClient: HttpClient) { }\n\n    insert = (pedidoDTO: PedidoDTO) => this.httpClient.post(\n        `${environment.API_URL}/pedidos`,\n        pedidoDTO,\n        {\n            observe: 'response',\n            responseType: 'text'\n        }\n    )\n}\n"]}